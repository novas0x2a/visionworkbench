// __BEGIN_LICENSE__
// Copyright (C) 2006-2010 United States Government as represented by
// the Administrator of the National Aeronautics and Space Administration.
// All Rights Reserved.
// __END_LICENSE__


#include <cxxtest/TestSuite.h>

#include <vw/Plate/Amqp.h>
#include <vw/Plate/ProtoBuffers.pb.h>
#include <vw/Plate/RpcServices.h>
#include <vw/Plate/IndexService.h>
#include <google/protobuf/stubs/common.h>

using namespace std;
using namespace vw;
using namespace vw::platefile;

#define EXCHANGE "unittest_exchange"
#define QUEUE "unittest_queue"
#define ROUTING_KEY "unittest"

namespace {
  void null_closure() {}
  using google::protobuf::NewCallback;
}


class TestAmqp : public CxxTest::TestSuite {

public:

  void test_basic_amqp_io() {
    boost::shared_ptr<AmqpConnection> conn(new AmqpConnection());
    AmqpChannel chan(conn);

    chan.exchange_declare(EXCHANGE, "direct", true, false);
    chan.queue_declare(QUEUE, true, true, false);
    chan.queue_bind(QUEUE, EXCHANGE, ROUTING_KEY);

    IndexReadRequest request;
    request.set_platefile_id(23);

    request.set_col(1);
    request.set_row(2);
    request.set_level(3);
    request.set_transaction_id(32);
    request.set_exact_transaction_match(true);

    ByteArray msg;
    AmqpRpcEndpoint::serialize_message(request, msg);

    chan.basic_publish(msg, EXCHANGE, ROUTING_KEY);

    SharedByteArray response_bytes;
    if (!chan.basic_get(QUEUE, response_bytes))
      vw_throw(IOErr() << "Basic.Get failed");

    IndexReadRequest response;
    AmqpRpcEndpoint::parse_message(*response_bytes.get(), response);

    TS_ASSERT_EQUALS(request.platefile_id(), response.platefile_id());
    TS_ASSERT_EQUALS(request.col(), response.col());
    TS_ASSERT_EQUALS(request.row(), response.row());
    TS_ASSERT_EQUALS(request.level(), response.level());
  }

  void test_rpc_serialization() {
    boost::shared_ptr<AmqpConnection> c1( new AmqpConnection() );
    boost::shared_ptr<AmqpConnection> c2( new AmqpConnection() );

    boost::shared_ptr<AmqpRpcServer> server( new AmqpRpcServer(c1, EXCHANGE, QUEUE"1") );
    boost::shared_ptr<AmqpRpcClient> client( new AmqpRpcClient(c2, EXCHANGE, QUEUE"2", "server") );

    boost::shared_ptr<google::protobuf::Service> srv_s( new IndexServiceImpl(TEST_SRCDIR) );
    boost::shared_ptr<google::protobuf::Service> srv_c( new IndexService::Stub(client.get() ) );

    server->bind_service(srv_s, "server");
    client->bind_service(srv_c, "client");

    IndexListRequest r1, r2;
    r1.set_type("toast");

    TS_ASSERT_THROWS_NOTHING(client->send_message(r1, "server"));
    TS_ASSERT_THROWS_NOTHING(server->get_message(r2));

    TS_ASSERT_EQUALS(r2.type(), r1.type());
    TS_ASSERT_EQUALS(r2.ByteSize(), r1.ByteSize());
  }

}; // class TestIndex
