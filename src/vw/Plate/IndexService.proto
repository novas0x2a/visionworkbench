// __BEGIN_LICENSE__
// Copyright (C) 2006-2010 United States Government as represented by
// the Administrator of the National Aeronautics and Space Administration.
// All Rights Reserved.
// __END_LICENSE__


package vw.platefile;
import "vw/Plate/Rpc.proto";

// ----------------------------------------------------------------------
//                     Blob file Data Structures
// ----------------------------------------------------------------------

// Each entry in the blob file is described by a BlobRecord.  This
// allows us to save and access data and headers with variable
// positioning and length.  BlobRecords are stored in the blob files:
// <platefile>/plate_<#>.blob
message BlobRecord {
  required uint32 header_offset = 1;
  required uint32 header_size = 2;
  required uint32 data_offset = 3;
  required uint32 data_size = 4;
}

// The TileRecord store metadata about the tile itself as well as the
// information needed to place the tile back into the index tree.  The
// [col, row, level, transaction_id] info can be used to reconstruct the index
// by reading TileRecords in the blob files.
message TileHeader {
  required int32 col = 5;
  required int32 row = 6;
  required int32 level = 7;
  optional uint64 transaction_id = 8 [ default = 0 ];
  optional string filetype = 10 [ default = 'jpg' ];
}

// ----------------------------------------------------------------------
//                      Index Data Structures
// ----------------------------------------------------------------------

// The IndexHeader store basic metadata for the platefile, such as the
// default tile size, file type, and map projection information.
// This is typically stored in the <platfile>/plate.index file.
message IndexHeader {

  // "Public" Metadata
  //
  // You should set these values before passing an IndexHeader along
  // to the Index::construct_create() method.
  //
  optional uint32 tile_size = 2;     // tile width/heigh in pixels
  optional string tile_filetype = 3; // file type [e.g. tif, png, or jpg]
  optional int32 pixel_format = 4;   // see vw/Image/PixelTypeInfo.h
  optional int32 channel_type = 5;   // see vw/Image/PixelTypeInfo.h
  optional string type = 6;          // platefile type [ toast, kml, or gigapan ]
  optional string description = 7;   // textual description
  optional int32 num_levels = 8;     // number of pyramid levels

  // Privately Managed Metadata
  //
  // These values are managed privately be the actual index class. You
  // should never need to set these yourself.
  //
  required int32 platefile_id = 1;   // a unique number that identifies this platefile
  optional int32 version = 10 [default = 1];
  optional int32 transaction_read_cursor = 11 [default = 1];
  optional int32 transaction_write_cursor = 12 [default = 1];

}

// The IndexRecord stores basic metadata for locating a tile in a
// blob.  The IndexRecord is used to store this information in a live
// index (in main memory), and can also be stored as part of a
// TileHeader, which is written to the blob file on disk.  Other
// metadata about that tile is stored alongside the tile itself in the
// blobfile in a TileRecord protobufer (see below).
message IndexRecord {
  optional int32 blob_id = 1 [default = -1];
  optional uint64 blob_offset = 2 [default = 0];
  optional string filetype = 3 [default = "default_to_index"];
}

// ----------------------------------------------------------------------
//             Remote Procedure Calls (RPC) for Index Server
// ----------------------------------------------------------------------

// ----------------------------------
// Client --> Server Requests
// ----------------------------------

message IndexOpenRequest {
  required string plate_name = 1;
}

message IndexCreateRequest {
  required string plate_name = 1;
  required IndexHeader index_header = 2;
}

// If given, the arguments act as filters
message IndexListRequest {
  optional string tile_filetype = 1; // file type [e.g. tif, png, or jpg]
  optional int32 pixel_format   = 2; // see vw/Image/PixelTypeInfo.h
  optional int32 channel_type   = 3; // see vw/Image/PixelTypeInfo.h
  optional string type          = 4; // platefile type [ toast, kml, or gigapan ]
}

message IndexInfoRequest {
  required int32 platefile_id = 1;
}

message IndexLogRequest {
  required int32 platefile_id = 1;
  required string message = 2;
}

message IndexReadRequest {
  required int32 platefile_id = 1;
  required int32 col = 3;
  required int32 row = 4;
  required int32 level = 5;
  required int32 transaction_id = 6;
  required bool exact_transaction_match = 7;
}

message IndexPageRequest {
  required int32 platefile_id = 1;
  required int32 col = 3;
  required int32 row = 4;
  required int32 level = 5;
}

message IndexWriteRequest {
  required int32 platefile_id = 1;
}

message IndexWriteUpdate {
  required int32 platefile_id = 1;
  required TileHeader header = 3;
  required IndexRecord record = 4;
}

message IndexMultiWriteUpdate {
  repeated IndexWriteUpdate write_updates = 2;
}

message IndexWriteComplete {
  required int32 platefile_id = 1;
  required int32 blob_id = 2;
  required uint64 blob_offset = 3;
}

message IndexTransactionRequest {
  required int32 platefile_id = 1;
  required string description = 2;
  required int32 transaction_id_override = 3;
}

message IndexTransactionComplete {
  required int32 platefile_id = 1;
  required int32 transaction_id = 2;
  required bool update_read_cursor = 3;
}

message IndexTransactionFailed {
  required int32 platefile_id = 1;
  required int32 transaction_id = 2;
}

message IndexTransactionCursorRequest {
  required int32 platefile_id = 1;
}

message IndexNumLevelsRequest {
  required int32 platefile_id = 1;
}

message IndexTestRequest {
  required int64 value = 1;
}

// ----------------------------------
// Server --> Client Responses
// ----------------------------------

message IndexOpenReply {
  required string short_plate_filename = 1;
  required string full_plate_filename = 2;
  required IndexHeader index_header = 3;
}

message IndexInfoReply {
  required string short_plate_filename = 1;
  required string full_plate_filename = 2;
  required IndexHeader index_header = 3;
}

message IndexListReply {
  repeated string platefile_names = 1;
}

message IndexPageReply {
  required bytes page_bytes = 1;
}

message IndexReadReply {
  required IndexRecord index_record = 1;
}

message IndexSuccess {
  optional string message = 1;
}

message IndexWriteReply {
  required int32 blob_id = 1;
  required int32 size = 2;
}

message IndexTransactionReply {
  required int32 transaction_id = 1;
}

message IndexTransactionCursorReply {
  required int32 transaction_id = 1;
}

message IndexNumLevelsReply {
  required int32 num_levels = 1;
}

message IndexTestReply {
  required int64 value = 1;
}

service IndexService {

  // Basic Platefile Management
  rpc OpenRequest (IndexOpenRequest) returns (IndexOpenReply);
  rpc CreateRequest (IndexCreateRequest) returns (IndexOpenReply);
  rpc InfoRequest (IndexInfoRequest) returns (IndexInfoReply);

  // Platefile I/O
  rpc PageRequest (IndexPageRequest) returns (IndexPageReply);
  rpc ReadRequest (IndexReadRequest) returns (IndexReadReply);
  rpc WriteRequest (IndexWriteRequest) returns (IndexWriteReply);
  rpc WriteUpdate (IndexWriteUpdate) returns (RpcNullMessage);
  rpc MultiWriteUpdate (IndexMultiWriteUpdate) returns (RpcNullMessage);
  rpc WriteComplete (IndexWriteComplete) returns (RpcNullMessage);


  // Transaction Management
  rpc TransactionRequest (IndexTransactionRequest) returns (IndexTransactionReply);
  rpc TransactionComplete (IndexTransactionComplete) returns (RpcNullMessage);
  rpc TransactionFailed (IndexTransactionFailed) returns (RpcNullMessage);
  rpc TransactionCursor (IndexTransactionCursorRequest) returns (IndexTransactionCursorReply);

  // Misc.
  rpc NumLevelsRequest (IndexNumLevelsRequest) returns (IndexNumLevelsReply);
  rpc ListRequest (IndexListRequest) returns (IndexListReply);
  rpc TestRequest (IndexTestRequest) returns (IndexTestReply);
  rpc LogRequest (IndexLogRequest) returns (RpcNullMessage);

}
