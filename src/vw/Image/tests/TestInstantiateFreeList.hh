// __BEGIN_LICENSE__
// Copyright (C) 2006-2010 United States Government as represented by
// the Administrator of the National Aeronautics and Space Administration.
// All Rights Reserved.
// __END_LICENSE__


template T vw::_round_if_needed < T > (boost::disable_if<boost::is_floating_point<DestT>, double>::type);
//template T vw::_round_if_needed < T > (boost::enable_if<boost::is_floating_point<DestT>, double>::type);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgAbsFunctor> vw::abs < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgAbsFunctor, PixelT, void>::type vw::abs < PixelT > (const vw::PixelMathBase<PixelT>&);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgAcosFunctor> vw::acos < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgAcosFunctor, PixelT, void>::type vw::acos < PixelT > (const vw::PixelMathBase<PixelT>&);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgAcoshFunctor> vw::acosh < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgAcoshFunctor, PixelT, void>::type vw::acosh < PixelT > (const vw::PixelMathBase<PixelT>&);
template boost::enable_if<vw::IsScalarOrCompound<T>::type, vw::PixelChannelType<T>::type>::type vw::alpha_channel < PixelT > (PixelT&);
template vw::UnaryPerPixelView<ViewT, vw::ApplyPixelMask<vw::UnmaskedPixelType<ViewT::pixel_type>::type> > vw::apply_mask < ViewT > (const vw::ImageViewBase<ImageT>&);
template vw::UnaryPerPixelView<ViewT, vw::ApplyPixelMask<vw::UnmaskedPixelType<ViewT::pixel_type>::type> > vw::apply_mask < ViewT > (const vw::ImageViewBase<ImageT>&, const vw::UnmaskedPixelType<ViewT::pixel_type>::type&);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgAsinFunctor> vw::asin < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgAsinFunctor, PixelT, void>::type vw::asin < PixelT > (const vw::PixelMathBase<PixelT>&);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgAsinhFunctor> vw::asinh < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgAsinhFunctor, PixelT, void>::type vw::asinh < PixelT > (const vw::PixelMathBase<PixelT>&);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgAtanFunctor> vw::atan < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgAtanFunctor, PixelT, void>::type vw::atan < PixelT > (const vw::PixelMathBase<PixelT>&);
template vw::BinaryPerPixelView<Image1T, Image2T, vw::math::ArgArgAtan2Functor> vw::atan2 < Image1T,Image2T > (const vw::ImageViewBase<ImageT>&, const vw::ImageViewBase<View2T>&);
template boost::disable_if<vw::IsImageView<ScalarT>, vw::UnaryPerPixelView<ImageT, vw::math::ValArgAtan2Functor<ScalarT> > >::type vw::atan2 < ImageT,ScalarT > (ScalarT, const vw::ImageViewBase<ImageT>&);
template boost::disable_if<vw::IsImageView<ScalarT>, vw::UnaryPerPixelView<ImageT, vw::math::ArgValAtan2Functor<ScalarT> > >::type vw::atan2 < ImageT,ScalarT > (const vw::ImageViewBase<ImageT>&, ScalarT);
template boost::enable_if<vw::CompoundIsCompatible<T1, T2>, vw::CompoundResult<vw::math::ArgArgAtan2Functor, Pixel1T, Pixel2T>::type>::type vw::atan2 < Pixel1T,Pixel2T > (const vw::PixelMathBase<PixelT>&, const vw::PixelMathBase<Pixel2T>&);
template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::math::ValArgAtan2Functor<ScalarT>, PixelT, void>::type>::type vw::atan2 < PixelT,ScalarT > (ScalarT, const vw::PixelMathBase<PixelT>&);
template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::math::ArgValAtan2Functor<ScalarT>, PixelT, void>::type>::type vw::atan2 < PixelT,ScalarT > (const vw::PixelMathBase<PixelT>&, ScalarT);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgAtanhFunctor> vw::atanh < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgAtanhFunctor, PixelT, void>::type vw::atanh < PixelT > (const vw::PixelMathBase<PixelT>&);
template vw::BlockRasterizeView<ImageT> vw::block_cache < ImageT > (const vw::ImageViewBase<ImageT>&, const vw::Vector2i&, int);
template vw::BlockRasterizeView<ImageT> vw::block_cache < ImageT > (const vw::ImageViewBase<ImageT>&, const vw::Vector2i&, int, vw::Cache&);
template vw::BlockRasterizeView<ImageT> vw::block_rasterize < ImageT > (const vw::ImageViewBase<ImageT>&, const vw::Vector2i&, int);
template void vw::block_write_image < ImageT > (vw::ImageResource&, const vw::ImageViewBase<ImageT>&, const vw::ProgressCallback&);
template BBox2i vw::bounding_box < ViewT > (const vw::ImageViewBase<ImageT>&);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgCbrtFunctor> vw::cbrt < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgCbrtFunctor, PixelT, void>::type vw::cbrt < PixelT > (const vw::PixelMathBase<PixelT>&);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgCeilFunctor> vw::ceil < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgCeilFunctor, PixelT, void>::type vw::ceil < PixelT > (const vw::PixelMathBase<PixelT>&);
//template vw::UnaryPerPixelView<ImageT, vw::PixelChannelCastFunctor<ChannelT> > vw::channel_cast < ChannelT,ImageT > (const vw::ImageViewBase<View2T>&);
template boost::enable_if<vw::IsScalarOrCompound<PixelT>::type, vw::CompoundChannelCast<PixelT, ChannelT>::type>::type vw::channel_cast < ChannelT,PixelT > (PixelT);
template boost::enable_if<vw::IsScalarOrCompound<PixelT>::type, vw::CompoundChannelCast<PixelT, ChannelT>::type>::type vw::channel_cast_clamp < ChannelT,PixelT > (PixelT);
template boost::enable_if<vw::IsScalarOrCompound<PixelT>::type, vw::CompoundChannelCast<PixelT, ChannelT>::type>::type vw::channel_cast_clamp_if_int < ChannelT,PixelT > (PixelT);
//template vw::UnaryPerPixelView<ImageT, vw::PixelChannelCastRescaleFunctor<ChannelT> > vw::channel_cast_rescale < ChannelT,ImageT > (const vw::ImageViewBase<View2T>&);
template boost::enable_if<vw::IsScalarOrCompound<PixelT>::type, vw::CompoundChannelCast<PixelT, ChannelT>::type>::type vw::channel_cast_rescale < ChannelT,PixelT > (PixelT);
template boost::enable_if<vw::IsScalarOrCompound<PixelT>::type, vw::CompoundChannelCast<PixelT, ChannelT>::type>::type vw::channel_cast_round < ChannelT,PixelT > (PixelT);
template boost::enable_if<vw::IsScalarOrCompound<PixelT>::type, vw::CompoundChannelCast<PixelT, ChannelT>::type>::type vw::channel_cast_round_and_clamp < ChannelT,PixelT > (PixelT);
template boost::enable_if<vw::IsScalarOrCompound<PixelT>::type, vw::CompoundChannelCast<PixelT, ChannelT>::type>::type vw::channel_cast_round_and_clamp_if_int < ChannelT,PixelT > (PixelT);
template boost::enable_if<vw::IsScalarOrCompound<PixelT>::type, vw::CompoundChannelCast<PixelT, ChannelT>::type>::type vw::channel_cast_round_if_int < ChannelT,PixelT > (PixelT);
template vw::ChannelsToPlanesView<ImageT> vw::channels_to_planes < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::UnaryPerPixelView<ImageT, vw::UnaryCompoundFunctor<vw::ChannelClampFunctor<ImageT::pixel_type>, ImageT::pixel_type> > vw::clamp < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::UnaryPerPixelView<ImageT, vw::UnaryCompoundFunctor<vw::ChannelClampFunctor<ImageT::pixel_type>, ImageT::pixel_type> > vw::clamp < ImageT,HighT > (const vw::ImageViewBase<ImageT>&, HighT);
template vw::UnaryPerPixelView<ImageT, vw::UnaryCompoundFunctor<vw::ChannelClampFunctor<ImageT::pixel_type>, ImageT::pixel_type> > vw::clamp < ImageT,LowT,HighT > (const vw::ImageViewBase<ImageT>&, LowT, HighT);
template vw::CompositionTransform<Tx1T, Tx2T> vw::compose < Tx1T,Tx2T > (const vw::TransformBase<ImplT>&, const vw::TransformBase<Tx2T>&);
template vw::CompositionTransform<Tx1T, vw::CompositionTransform<Tx2T, Tx3T> > vw::compose < Tx1T,Tx2T,Tx3T > (const vw::TransformBase<ImplT>&, const vw::TransformBase<Tx2T>&, const vw::TransformBase<Tx3T>&);
template vw::CompositionTransform<Tx1T, vw::CompositionTransform<Tx2T, vw::CompositionTransform<Tx3T, Tx4T> > > vw::compose < Tx1T,Tx2T,Tx3T,Tx4T > (const vw::TransformBase<ImplT>&, const vw::TransformBase<Tx2T>&, const vw::TransformBase<Tx3T>&, const vw::TransformBase<Tx3T>&);
template BBox2f vw::compute_transformed_bbox < ViewT,TransformT > (const vw::ImageViewBase<ImageT>&, const TransformT&, double, double);
template BBox2f vw::compute_transformed_bbox_fast < ViewT,TransformT > (const vw::ImageViewBase<ImageT>&, const TransformT&, double, double);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgConjFunctor> vw::conj < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgConjFunctor, PixelT, void>::type vw::conj < PixelT > (const vw::PixelMathBase<PixelT>&);
template vw::ConstantView<PixelT> vw::constant_view < PixelT > (const PixelT&, vw::int32, vw::int32, vw::int32);
template vw::ConvolutionView<SrcT, KernelT, vw::ConstantEdgeExtension> vw::convolution_filter < SrcT,KernelT > (const vw::ImageViewBase<ImageT>&, const KernelT&);
template vw::ConvolutionView<SrcT, KernelT, vw::ConstantEdgeExtension> vw::convolution_filter < SrcT,KernelT > (const vw::ImageViewBase<ImageT>&, const KernelT&, vw::int32, vw::int32);
template vw::ConvolutionView<ImageT, KernelT, EdgeT> vw::convolution_filter < SrcT,KernelT,EdgeT > (const vw::ImageViewBase<ImageT>&, const KernelT&, EdgeT);
template vw::ConvolutionView<ImageT, KernelT, EdgeT> vw::convolution_filter < SrcT,KernelT,EdgeT > (const vw::ImageViewBase<ImageT>&, const KernelT&, vw::int32, vw::int32, EdgeT);
template vw::CopyView<ImageT> vw::copy < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::BinaryPerPixelView<ViewT, MaskViewT, vw::CopyPixelMask<ViewT::pixel_type> > vw::copy_mask < ViewT,MaskViewT > (const vw::ImageViewBase<ImageT>&, const vw::ImageViewBase<View2T>&);
template vw::BinaryPerPixelView<Image1T, Image2T, vw::math::ArgArgCopysignFunctor> vw::copysign < Image1T,Image2T > (const vw::ImageViewBase<ImageT>&, const vw::ImageViewBase<View2T>&);
template boost::disable_if<vw::IsImageView<ScalarT>, vw::UnaryPerPixelView<ImageT, vw::math::ValArgCopysignFunctor<ScalarT> > >::type vw::copysign < ImageT,ScalarT > (ScalarT, const vw::ImageViewBase<ImageT>&);
template boost::disable_if<vw::IsImageView<ScalarT>, vw::UnaryPerPixelView<ImageT, vw::math::ArgValCopysignFunctor<ScalarT> > >::type vw::copysign < ImageT,ScalarT > (const vw::ImageViewBase<ImageT>&, ScalarT);
template boost::enable_if<vw::CompoundIsCompatible<T1, T2>, vw::CompoundResult<vw::math::ArgArgCopysignFunctor, Pixel1T, Pixel2T>::type>::type vw::copysign < Pixel1T,Pixel2T > (const vw::PixelMathBase<PixelT>&, const vw::PixelMathBase<Pixel2T>&);
template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::math::ValArgCopysignFunctor<ScalarT>, PixelT, void>::type>::type vw::copysign < PixelT,ScalarT > (ScalarT, const vw::PixelMathBase<PixelT>&);
template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::math::ArgValCopysignFunctor<ScalarT>, PixelT, void>::type>::type vw::copysign < PixelT,ScalarT > (const vw::PixelMathBase<PixelT>&, ScalarT);
//template vw::ProductType<SrcAccessT::pixel_type, std::iterator_traits<_ForwardIterator2>::value_type>::type vw::correlate_1d_at_point < SrcAccessT,KernelIterT > (const SrcAccessT&, const KernelIterT&, vw::int32);
template vw::ProductType<SrcAccessT::pixel_type, KernelAccessT::pixel_type>::type vw::correlate_2d_at_point < SrcAccessT,KernelAccessT > (const SrcAccessT&, const KernelAccessT&, vw::int32, vw::int32);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgCosFunctor> vw::cos < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgCosFunctor, PixelT, void>::type vw::cos < PixelT > (const vw::PixelMathBase<PixelT>&);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgCoshFunctor> vw::cosh < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgCoshFunctor, PixelT, void>::type vw::cosh < PixelT > (const vw::PixelMathBase<PixelT>&);
template vw::UnaryPerPixelView<ViewT, vw::CreatePixelMask<ViewT::pixel_type> > vw::create_mask < ViewT > (const vw::ImageViewBase<ImageT>&);
template vw::UnaryPerPixelView<ViewT, vw::CreatePixelMask<ViewT::pixel_type> > vw::create_mask < ViewT > (const vw::ImageViewBase<ImageT>&, const ViewT::pixel_type&);
template vw::CropView<ImageT> vw::crop < ImageT > (const vw::ImageViewBase<ImageT>&, vw::int32, vw::int32, vw::int32, vw::int32);
//template vw::CropView<ImageT> vw::crop < ImageT,BBoxRealT > (const vw::ImageViewBase<ImageT>&, const vw::math::BBox<BBoxRealT, 2>&);
template vw::SeparableConvolutionView<SrcT, vw::DefaultKernelT<SrcT::pixel_type>::type, vw::ConstantEdgeExtension> vw::derivative_filter < SrcT > (const vw::ImageViewBase<ImageT>&, vw::int32, vw::int32);
template vw::SeparableConvolutionView<SrcT, vw::DefaultKernelT<SrcT::pixel_type>::type, vw::ConstantEdgeExtension> vw::derivative_filter < SrcT > (const vw::ImageViewBase<ImageT>&, vw::int32, vw::int32, vw::int32, vw::int32);
template vw::SeparableConvolutionView<SrcT, vw::DefaultKernelT<SrcT::pixel_type>::type, EdgeT> vw::derivative_filter < SrcT,EdgeT > (const vw::ImageViewBase<ImageT>&, vw::int32, vw::int32, EdgeT);
template vw::SeparableConvolutionView<SrcT, vw::DefaultKernelT<SrcT::pixel_type>::type, EdgeT> vw::derivative_filter < SrcT,EdgeT > (const vw::ImageViewBase<ImageT>&, vw::int32, vw::int32, vw::int32, vw::int32, EdgeT);
template vw::EdgeExtensionView<ImageT, vw::ConstantEdgeExtension> vw::edge_extend < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::EdgeExtensionView<ImageT, vw::ConstantEdgeExtension> vw::edge_extend < ImageT > (const vw::ImageViewBase<ImageT>&, const vw::BBox2i&);
template vw::EdgeExtensionView<ImageT, vw::ConstantEdgeExtension> vw::edge_extend < ImageT > (const vw::ImageViewBase<ImageT>&, ptrdiff_t, ptrdiff_t, vw::int32, vw::int32);
template vw::EdgeExtensionView<ImageT, ExtensionT> vw::edge_extend < ImageT,ExtensionT > (const vw::ImageViewBase<ImageT>&, const ExtensionT&);
template vw::EdgeExtensionView<ImageT, ExtensionT> vw::edge_extend < ImageT,ExtensionT > (const vw::ImageViewBase<ImageT>&, const vw::BBox2i&, const ExtensionT&);
template vw::EdgeExtensionView<ImageT, ExtensionT> vw::edge_extend < ImageT,ExtensionT > (const vw::ImageViewBase<ImageT>&, ptrdiff_t, ptrdiff_t, vw::int32, vw::int32, const ExtensionT&);
//template vw::EdgeMaskView<ViewT> vw::edge_mask < ViewT > (const vw::ImageViewBase<ImageT>&, const vw::ProgressCallback&);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgErfFunctor> vw::erf < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgErfFunctor, PixelT, void>::type vw::erf < PixelT > (const vw::PixelMathBase<PixelT>&);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgErfcFunctor> vw::erfc < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgErfcFunctor, PixelT, void>::type vw::erfc < PixelT > (const vw::PixelMathBase<PixelT>&);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgExpFunctor> vw::exp < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgExpFunctor, PixelT, void>::type vw::exp < PixelT > (const vw::PixelMathBase<PixelT>&);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgExp2Functor> vw::exp2 < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgExp2Functor, PixelT, void>::type vw::exp2 < PixelT > (const vw::PixelMathBase<PixelT>&);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgExpm1Functor> vw::expm1 < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgExpm1Functor, PixelT, void>::type vw::expm1 < PixelT > (const vw::PixelMathBase<PixelT>&);
template vw::BinaryPerPixelView<Image1T, Image2T, vw::math::ArgArgFdimFunctor> vw::fdim < Image1T,Image2T > (const vw::ImageViewBase<ImageT>&, const vw::ImageViewBase<View2T>&);
template boost::disable_if<vw::IsImageView<ScalarT>, vw::UnaryPerPixelView<ImageT, vw::math::ValArgFdimFunctor<ScalarT> > >::type vw::fdim < ImageT,ScalarT > (ScalarT, const vw::ImageViewBase<ImageT>&);
template boost::disable_if<vw::IsImageView<ScalarT>, vw::UnaryPerPixelView<ImageT, vw::math::ArgValFdimFunctor<ScalarT> > >::type vw::fdim < ImageT,ScalarT > (const vw::ImageViewBase<ImageT>&, ScalarT);
template boost::enable_if<vw::CompoundIsCompatible<T1, T2>, vw::CompoundResult<vw::math::ArgArgFdimFunctor, Pixel1T, Pixel2T>::type>::type vw::fdim < Pixel1T,Pixel2T > (const vw::PixelMathBase<PixelT>&, const vw::PixelMathBase<Pixel2T>&);
template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::math::ValArgFdimFunctor<ScalarT>, PixelT, void>::type>::type vw::fdim < PixelT,ScalarT > (ScalarT, const vw::PixelMathBase<PixelT>&);
template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::math::ArgValFdimFunctor<ScalarT>, PixelT, void>::type>::type vw::fdim < PixelT,ScalarT > (const vw::PixelMathBase<PixelT>&, ScalarT);
template void vw::fill < ImageT,ValueT > (const vw::ImageViewBase<ImageT>&, ValueT);
template vw::FlipHorizontalView<ImageT> vw::flip_horizontal < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::FlipVerticalView<ImageT> vw::flip_vertical < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgFloorFunctor> vw::floor < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgFloorFunctor, PixelT, void>::type vw::floor < PixelT > (const vw::PixelMathBase<PixelT>&);
template void vw::for_each_pixel < View1T,View2T,FuncT > (const vw::ImageViewBase<ImageT>&, const vw::ImageViewBase<View2T>&, FuncT&);
template void vw::for_each_pixel < View1T,View2T,FuncT > (const vw::ImageViewBase<ImageT>&, const vw::ImageViewBase<View2T>&, const FuncT&);
template void vw::for_each_pixel < View1T,View2T,View3T,FuncT > (const vw::ImageViewBase<ImageT>&, const vw::ImageViewBase<View2T>&, const vw::ImageViewBase<View3T>&, FuncT&);
template void vw::for_each_pixel < View1T,View2T,View3T,FuncT > (const vw::ImageViewBase<ImageT>&, const vw::ImageViewBase<View2T>&, const vw::ImageViewBase<View3T>&, const FuncT&);
template void vw::for_each_pixel < ViewT,FuncT > (const vw::ImageViewBase<ImageT>&, FuncT&, const vw::ProgressCallback&);
template void vw::for_each_pixel < ViewT,FuncT > (const vw::ImageViewBase<ImageT>&, const FuncT&, const vw::ProgressCallback&);
template void vw::for_each_pixel_ < View1T,View2T,FuncT > (const vw::ImageViewBase<ImageT>&, const vw::ImageViewBase<View2T>&, FuncT&);
template void vw::for_each_pixel_ < View1T,View2T,View3T,FuncT > (const vw::ImageViewBase<ImageT>&, const vw::ImageViewBase<View2T>&, const vw::ImageViewBase<View3T>&, FuncT&);
template void vw::for_each_pixel_ < ViewT,FuncT > (const vw::ImageViewBase<ImageT>&, FuncT&, const vw::ProgressCallback&);
template vw::SeparableConvolutionView<SrcT, vw::DefaultKernelT<SrcT::pixel_type>::type, vw::ConstantEdgeExtension> vw::gaussian_filter < SrcT > (const vw::ImageViewBase<ImageT>&, double);
template vw::SeparableConvolutionView<SrcT, vw::DefaultKernelT<SrcT::pixel_type>::type, vw::ConstantEdgeExtension> vw::gaussian_filter < SrcT > (const vw::ImageViewBase<ImageT>&, double, double);
template vw::SeparableConvolutionView<SrcT, vw::DefaultKernelT<SrcT::pixel_type>::type, vw::ConstantEdgeExtension> vw::gaussian_filter < SrcT > (const vw::ImageViewBase<ImageT>&, double, double, vw::int32, vw::int32);
template vw::SeparableConvolutionView<SrcT, vw::DefaultKernelT<SrcT::pixel_type>::type, EdgeT> vw::gaussian_filter < SrcT,EdgeT > (const vw::ImageViewBase<ImageT>&, double, EdgeT);
template vw::SeparableConvolutionView<SrcT, vw::DefaultKernelT<SrcT::pixel_type>::type, EdgeT> vw::gaussian_filter < SrcT,EdgeT > (const vw::ImageViewBase<ImageT>&, double, double, EdgeT);
template vw::SeparableConvolutionView<SrcT, vw::DefaultKernelT<SrcT::pixel_type>::type, EdgeT> vw::gaussian_filter < SrcT,EdgeT > (const vw::ImageViewBase<ImageT>&, double, double, vw::int32, vw::int32, EdgeT);
//template void vw::generate_derivative_kernel < KernelT > (std::vector<CharT, std::allocator<_CharT> >&, vw::int32, vw::int32);
//template void vw::generate_gaussian_derivative_kernel < KernelT > (vw::ImageView<PixelT>&, double, vw::int32, double, vw::int32, double, vw::int32);
//template void vw::generate_gaussian_kernel < KernelT > (std::vector<CharT, std::allocator<_CharT> >&, double, vw::int32);
//template void vw::generate_laplacian_of_gaussian_kernel < KernelT > (vw::ImageView<PixelT>&, double, vw::int32);
//template vw::ImageView<int> vw::grassfire < SourceT > (const vw::ImageViewBase<ImageT>&);
//template void vw::grassfire < SourceT,OutputT > (const vw::ImageViewBase<ImageT>&, vw::ImageView<OutputT>&);
template vw::BinaryPerPixelView<Image1T, Image2T, vw::math::ArgArgHypotFunctor> vw::hypot < Image1T,Image2T > (const vw::ImageViewBase<ImageT>&, const vw::ImageViewBase<View2T>&);
template boost::disable_if<vw::IsImageView<ScalarT>, vw::UnaryPerPixelView<ImageT, vw::math::ValArgHypotFunctor<ScalarT> > >::type vw::hypot < ImageT,ScalarT > (ScalarT, const vw::ImageViewBase<ImageT>&);
template boost::disable_if<vw::IsImageView<ScalarT>, vw::UnaryPerPixelView<ImageT, vw::math::ArgValHypotFunctor<ScalarT> > >::type vw::hypot < ImageT,ScalarT > (const vw::ImageViewBase<ImageT>&, ScalarT);
template boost::enable_if<vw::CompoundIsCompatible<T1, T2>, vw::CompoundResult<vw::math::ArgArgHypotFunctor, Pixel1T, Pixel2T>::type>::type vw::hypot < Pixel1T,Pixel2T > (const vw::PixelMathBase<PixelT>&, const vw::PixelMathBase<Pixel2T>&);
template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::math::ValArgHypotFunctor<ScalarT>, PixelT, void>::type>::type vw::hypot < PixelT,ScalarT > (ScalarT, const vw::PixelMathBase<PixelT>&);
template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::math::ArgValHypotFunctor<ScalarT>, PixelT, void>::type>::type vw::hypot < PixelT,ScalarT > (const vw::PixelMathBase<PixelT>&, ScalarT);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgImagFunctor> vw::imag < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgImagFunctor, PixelT, void>::type vw::imag < PixelT > (const vw::PixelMathBase<PixelT>&);
//template std::vector<vw::math::BBox<int, 2>, std::allocator<vw::math::BBox<int, 2> > > vw::image_blocks < T > (const T&, vw::int32, vw::int32);
template vw::InterpolationView<vw::EdgeExtensionView<ImageT, vw::ConstantEdgeExtension>, vw::BilinearInterpolation> vw::interpolate < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::InterpolationView<vw::EdgeExtensionView<ImageT, vw::ConstantEdgeExtension>, InterpT> vw::interpolate < ImageT,InterpT > (const vw::ImageViewBase<ImageT>&, const InterpT&);
template vw::InterpolationView<vw::EdgeExtensionView<ViewT, EdgeT>, InterpT> vw::interpolate < ImageT,InterpT,EdgeExtensionT > (const vw::ImageViewBase<ImageT>&, const InterpT&, const EdgeExtensionT&);
//template void vw::invalidate < ChildPixelT > (vw::PixelMask<ChildT>&);
template void vw::invalidate < PixelT > (PixelT&);
template vw::InverseTransform<TxT> vw::inverse < TxT > (const vw::TransformBase<ImplT>&);
template bool vw::is_opaque < ImageT > (const vw::ImageViewBase<ImageT>&);
template bool vw::is_opaque_helper < ImageT > (const ImageT&, vw::false_type);
template bool vw::is_opaque_helper < ImageT > (const ImageT&, vw::true_type);
//template bool vw::is_transparent < ChildT > (const vw::PixelMask<ChildT>&);
//template boost::enable_if<vw::PixelHasAlpha<T>::type, bool>::type vw::is_transparent < PixelT > (const PixelT&);
template boost::disable_if<vw::PixelHasAlpha<T>::type, bool>::type vw::is_transparent < PixelT > (const PixelT&);
//template bool vw::is_valid < ChildT > (const vw::PixelMask<ChildT>&);
template bool vw::is_valid < PixelT > (const PixelT&);
template vw::ConvolutionView<SrcT, vw::ImageView<vw::DefaultKernelT<SrcT::pixel_type>::type>, vw::ConstantEdgeExtension> vw::laplacian_filter < SrcT > (const vw::ImageViewBase<ImageT>&);
template vw::ConvolutionView<SrcT, vw::ImageView<vw::DefaultKernelT<SrcT::pixel_type>::type>, EdgeT> vw::laplacian_filter < SrcT,EdgeT > (const vw::ImageViewBase<ImageT>&, EdgeT);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgLgammaFunctor> vw::lgamma < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgLgammaFunctor, PixelT, void>::type vw::lgamma < PixelT > (const vw::PixelMathBase<PixelT>&);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgLogFunctor> vw::log < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgLogFunctor, PixelT, void>::type vw::log < PixelT > (const vw::PixelMathBase<PixelT>&);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgLog10Functor> vw::log10 < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgLog10Functor, PixelT, void>::type vw::log10 < PixelT > (const vw::PixelMathBase<PixelT>&);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgLog1pFunctor> vw::log1p < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgLog1pFunctor, PixelT, void>::type vw::log1p < PixelT > (const vw::PixelMathBase<PixelT>&);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgLog2Functor> vw::log2 < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgLog2Functor, PixelT, void>::type vw::log2 < PixelT > (const vw::PixelMathBase<PixelT>&);
//template vw::UnaryPerPixelView<ViewT, vw::MaskToAlpha<ViewT::pixel_type> > vw::mask_to_alpha < ViewT > (const vw::ImageViewBase<ImageT>&);
template vw::PixelChannelType<ViewT::pixel_type>::type vw::max_channel_value < ViewT > (const vw::ImageViewBase<ImageT>&);
//template vw::UnmaskedPixelType<ViewT::pixel_type>::type vw::max_pixel_value < ViewT > (const vw::ImageViewBase<ImageT>&);
//template boost::enable_if<vw::IsScalarOrCompound<T>, double>::type vw::mean_channel_value < T > (const vw::PixelMask<ChildT>&);
template double vw::mean_channel_value < ViewT > (const vw::ImageViewBase<ImageT>&);
template vw::PixelChannelCast<vw::UnmaskedPixelType<ViewT::pixel_type>::type, double>::type vw::mean_pixel_value < ViewT > (const vw::ImageViewBase<ImageT>&);
template vw::PixelChannelType<ViewT::pixel_type>::type vw::median_channel_value < ViewT > (const vw::ImageViewBase<ImageT>&);
//template ViewT::pixel_type vw::median_pixel_value < ViewT > (const vw::ImageViewBase<ImageT>&);
template vw::PixelChannelType<ViewT::pixel_type>::type vw::min_channel_value < ViewT > (const vw::ImageViewBase<ImageT>&);
template void vw::min_max_channel_values < ViewT > (const vw::ImageViewBase<ImageT>&, vw::PixelChannelType<ViewT::pixel_type>::type&, vw::PixelChannelType<ViewT::pixel_type>::type&);
//template void vw::min_max_pixel_values < ViewT > (const vw::ImageViewBase<ImageT>&, vw::UnmaskedPixelType<ViewT::pixel_type>::type&, vw::UnmaskedPixelType<ViewT::pixel_type>::type&);
//template vw::UnmaskedPixelType<ViewT::pixel_type>::type vw::min_pixel_value < ViewT > (const vw::ImageViewBase<ImageT>&);
template boost::enable_if<vw::IsScalarOrCompound<T>::type, PixelT&>::type vw::non_alpha_channels < PixelT > (PixelT&);
template boost::enable_if<vw::IsScalarOrCompound<T>::type, const PixelT&>::type vw::non_alpha_channels < PixelT > (const PixelT&);
template BBox2i vw::nonzero_data_bounding_box < ViewT > (const vw::ImageViewBase<ImageT>&);
template vw::UnaryPerPixelView<ImageT, vw::UnaryCompoundFunctor<vw::ChannelNormalizeFunctor<ImageT::pixel_type>, ImageT::pixel_type> > vw::normalize < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::UnaryPerPixelView<ImageT, vw::UnaryCompoundFunctor<vw::ChannelNormalizeFunctor<ImageT::pixel_type>, ImageT::pixel_type> > vw::normalize < ImageT,HighT > (const vw::ImageViewBase<ImageT>&, HighT);
template vw::UnaryPerPixelView<ImageT, vw::UnaryCompoundFunctor<vw::ChannelNormalizeFunctor<ImageT::pixel_type>, ImageT::pixel_type> > vw::normalize < ImageT,LowT,HighT > (const vw::ImageViewBase<ImageT>&, LowT, HighT);
template vw::UnaryPerPixelView<ImageT, vw::UnaryCompoundFunctor<vw::ChannelNormalizeFunctor<ImageT::pixel_type>, ImageT::pixel_type> > vw::normalize < ImageT,OldLowT,OldHighT,NewLowT,NewHighT > (const vw::ImageViewBase<ImageT>&, OldLowT, OldHighT, NewLowT, NewHighT);
template vw::UnaryPerPixelView<ImageT, vw::ChannelNormalizeRetainAlphaFunctor<ImageT::pixel_type> > vw::normalize_retain_alpha < ImageT,OldLowT,OldHighT,NewLowT,NewHighT > (const vw::ImageViewBase<ImageT>&, OldLowT, OldHighT, NewLowT, NewHighT);
template boost::enable_if<vw::CompoundIsCompatible<T1, T2>, bool>::type vw::operator!= < Pixel1T,Pixel2T > (const vw::PixelMathBase<PixelT>&, const vw::PixelMathBase<Pixel2T>&);
template vw::BinaryPerPixelView<Image1T, Image2T, vw::ArgArgProductFunctor> vw::operator* < Image1T,Image2T > (const vw::ImageViewBase<ImageT>&, const vw::ImageViewBase<View2T>&);
template boost::disable_if<vw::IsImageView<ScalarT>, vw::UnaryPerPixelView<ImageT, vw::ValArgProductFunctor<ScalarT> > >::type vw::operator* < ImageT,ScalarT > (ScalarT, const vw::ImageViewBase<ImageT>&);
template boost::disable_if<vw::IsImageView<ScalarT>, vw::UnaryPerPixelView<ImageT, vw::ArgValProductFunctor<ScalarT> > >::type vw::operator* < ImageT,ScalarT > (const vw::ImageViewBase<ImageT>&, ScalarT);
template boost::enable_if<vw::CompoundIsCompatible<T1, T2>, vw::CompoundResult<vw::ArgArgProductFunctor, Pixel1T, Pixel2T>::type>::type vw::operator* < Pixel1T,Pixel2T > (const vw::PixelMathBase<PixelT>&, const vw::PixelMathBase<Pixel2T>&);
template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::ValArgProductFunctor<ScalarT>, PixelT, void>::type>::type vw::operator* < PixelT,ScalarT > (ScalarT, const vw::PixelMathBase<PixelT>&);
template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::ArgValProductFunctor<ScalarT>, PixelT, void>::type>::type vw::operator* < PixelT,ScalarT > (const vw::PixelMathBase<PixelT>&, ScalarT);
//template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::ArgValProductFunctor<ScalarT>, PixelT, void>::type>::type vw::operator* < PixelT,ScalarT > (const vw::PixelMathBase<PixelT>&, vw::PixelMask<ChildPixel1T>);
//template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::ValArgProductFunctor<ScalarT>, PixelT, void>::type>::type vw::operator* < PixelT,ScalarT > (vw::PixelMask<ChildPixel1T>, const vw::PixelMathBase<PixelT>&);
template boost::disable_if<vw::IsImageView<ScalarT>, const ImageT&>::type vw::operator*= < ImageT,ScalarT > (const vw::ImageViewBase<ImageT>&, ScalarT);
template boost::disable_if<vw::IsImageView<ScalarT>, ImageT&>::type vw::operator*= < ImageT,ScalarT > (vw::ImageViewBase<ImageT>&, ScalarT);
template boost::enable_if<vw::CompoundIsCompatible<T1, T2>, Pixel1T&>::type vw::operator*= < Pixel1T,Pixel2T > (vw::PixelMathBase<PixelT>&, const vw::PixelMathBase<Pixel2T>&);
template boost::enable_if<vw::IsScalar<ScalarT>, PixelT&>::type vw::operator*= < PixelT,ScalarT > (vw::PixelMathBase<PixelT>&, ScalarT);
//template boost::enable_if<vw::IsScalar<ScalarT>, PixelT&>::type vw::operator*= < PixelT,ScalarT > (vw::PixelMathBase<PixelT>&, vw::PixelMask<ChildPixel1T>);
template vw::BinaryPerPixelView<Image1T, Image2T, vw::ArgArgSumFunctor> vw::operator+ < Image1T,Image2T > (const vw::ImageViewBase<ImageT>&, const vw::ImageViewBase<View2T>&);
template boost::disable_if<vw::IsImageView<ScalarT>, vw::UnaryPerPixelView<ImageT, vw::ValArgSumFunctor<ScalarT> > >::type vw::operator+ < ImageT,ScalarT > (ScalarT, const vw::ImageViewBase<ImageT>&);
template boost::disable_if<vw::IsImageView<ScalarT>, vw::UnaryPerPixelView<ImageT, vw::ArgValSumFunctor<ScalarT> > >::type vw::operator+ < ImageT,ScalarT > (const vw::ImageViewBase<ImageT>&, ScalarT);
template boost::enable_if<vw::CompoundIsCompatible<T1, T2>, vw::CompoundResult<vw::ArgArgSumFunctor, Pixel1T, Pixel2T>::type>::type vw::operator+ < Pixel1T,Pixel2T > (const vw::PixelMathBase<PixelT>&, const vw::PixelMathBase<Pixel2T>&);
template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::ValArgSumFunctor<ScalarT>, PixelT, void>::type>::type vw::operator+ < PixelT,ScalarT > (ScalarT, const vw::PixelMathBase<PixelT>&);
template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::ArgValSumFunctor<ScalarT>, PixelT, void>::type>::type vw::operator+ < PixelT,ScalarT > (const vw::PixelMathBase<PixelT>&, ScalarT);
//template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::ArgValSumFunctor<ScalarT>, PixelT, void>::type>::type vw::operator+ < PixelT,ScalarT > (const vw::PixelMathBase<PixelT>&, vw::PixelMask<ChildPixel1T>);
//template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::ValArgSumFunctor<ScalarT>, PixelT, void>::type>::type vw::operator+ < PixelT,ScalarT > (vw::PixelMask<ChildPixel1T>, const vw::PixelMathBase<PixelT>&);
template boost::disable_if<vw::IsImageView<ScalarT>, const ImageT&>::type vw::operator+= < ImageT,ScalarT > (const vw::ImageViewBase<ImageT>&, ScalarT);
template boost::disable_if<vw::IsImageView<ScalarT>, ImageT&>::type vw::operator+= < ImageT,ScalarT > (vw::ImageViewBase<ImageT>&, ScalarT);
template boost::enable_if<vw::CompoundIsCompatible<T1, T2>, Pixel1T&>::type vw::operator+= < Pixel1T,Pixel2T > (vw::PixelMathBase<PixelT>&, const vw::PixelMathBase<Pixel2T>&);
template boost::enable_if<vw::IsScalar<ScalarT>, PixelT&>::type vw::operator+= < PixelT,ScalarT > (vw::PixelMathBase<PixelT>&, ScalarT);
//template boost::enable_if<vw::IsScalar<ScalarT>, PixelT&>::type vw::operator+= < PixelT,ScalarT > (vw::PixelMathBase<PixelT>&, vw::PixelMask<ChildPixel1T>);
template vw::BinaryPerPixelView<Image1T, Image2T, vw::ArgArgDifferenceFunctor> vw::operator- < Image1T,Image2T > (const vw::ImageViewBase<ImageT>&, const vw::ImageViewBase<View2T>&);
template vw::UnaryPerPixelView<ImageT, vw::ArgNegationFunctor> vw::operator- < ImageT > (const vw::ImageViewBase<ImageT>&);
template boost::disable_if<vw::IsImageView<ScalarT>, vw::UnaryPerPixelView<ImageT, vw::ValArgDifferenceFunctor<ScalarT> > >::type vw::operator- < ImageT,ScalarT > (ScalarT, const vw::ImageViewBase<ImageT>&);
template boost::disable_if<vw::IsImageView<ScalarT>, vw::UnaryPerPixelView<ImageT, vw::ArgValDifferenceFunctor<ScalarT> > >::type vw::operator- < ImageT,ScalarT > (const vw::ImageViewBase<ImageT>&, ScalarT);
template boost::enable_if<vw::CompoundIsCompatible<T1, T2>, vw::CompoundResult<vw::ArgArgDifferenceFunctor, Pixel1T, Pixel2T>::type>::type vw::operator- < Pixel1T,Pixel2T > (const vw::PixelMathBase<PixelT>&, const vw::PixelMathBase<Pixel2T>&);
template vw::CompoundResult<vw::ArgNegationFunctor, PixelT, void>::type vw::operator- < PixelT > (const vw::PixelMathBase<PixelT>&);
template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::ValArgDifferenceFunctor<ScalarT>, PixelT, void>::type>::type vw::operator- < PixelT,ScalarT > (ScalarT, const vw::PixelMathBase<PixelT>&);
template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::ArgValDifferenceFunctor<ScalarT>, PixelT, void>::type>::type vw::operator- < PixelT,ScalarT > (const vw::PixelMathBase<PixelT>&, ScalarT);
//template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::ArgValDifferenceFunctor<ScalarT>, PixelT, void>::type>::type vw::operator- < PixelT,ScalarT > (const vw::PixelMathBase<PixelT>&, vw::PixelMask<ChildPixel1T>);
//template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::ValArgDifferenceFunctor<ScalarT>, PixelT, void>::type>::type vw::operator- < PixelT,ScalarT > (vw::PixelMask<ChildPixel1T>, const vw::PixelMathBase<PixelT>&);
template boost::disable_if<vw::IsImageView<ScalarT>, const ImageT&>::type vw::operator-= < ImageT,ScalarT > (const vw::ImageViewBase<ImageT>&, ScalarT);
template boost::disable_if<vw::IsImageView<ScalarT>, ImageT&>::type vw::operator-= < ImageT,ScalarT > (vw::ImageViewBase<ImageT>&, ScalarT);
template boost::enable_if<vw::CompoundIsCompatible<T1, T2>, Pixel1T&>::type vw::operator-= < Pixel1T,Pixel2T > (vw::PixelMathBase<PixelT>&, const vw::PixelMathBase<Pixel2T>&);
template boost::enable_if<vw::IsScalar<ScalarT>, PixelT&>::type vw::operator-= < PixelT,ScalarT > (vw::PixelMathBase<PixelT>&, ScalarT);
//template boost::enable_if<vw::IsScalar<ScalarT>, PixelT&>::type vw::operator-= < PixelT,ScalarT > (vw::PixelMathBase<PixelT>&, vw::PixelMask<ChildPixel1T>);
template vw::BinaryPerPixelView<Image1T, Image2T, vw::ArgArgSafeQuotientFunctor> vw::operator/ < Image1T,Image2T > (const vw::ImageViewBase<ImageT>&, const vw::ImageViewBase<View2T>&);
template boost::disable_if<vw::IsImageView<ScalarT>, vw::UnaryPerPixelView<ImageT, vw::ValArgSafeQuotientFunctor<ScalarT> > >::type vw::operator/ < ImageT,ScalarT > (ScalarT, const vw::ImageViewBase<ImageT>&);
template boost::disable_if<vw::IsImageView<ScalarT>, vw::UnaryPerPixelView<ImageT, vw::ArgValSafeQuotientFunctor<ScalarT> > >::type vw::operator/ < ImageT,ScalarT > (const vw::ImageViewBase<ImageT>&, ScalarT);
template boost::enable_if<vw::CompoundIsCompatible<T1, T2>, vw::CompoundResult<vw::ArgArgQuotientFunctor, Pixel1T, Pixel2T>::type>::type vw::operator/ < Pixel1T,Pixel2T > (const vw::PixelMathBase<PixelT>&, const vw::PixelMathBase<Pixel2T>&);
template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::ValArgQuotientFunctor<ScalarT>, PixelT, void>::type>::type vw::operator/ < PixelT,ScalarT > (ScalarT, const vw::PixelMathBase<PixelT>&);
template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::ArgValQuotientFunctor<ScalarT>, PixelT, void>::type>::type vw::operator/ < PixelT,ScalarT > (const vw::PixelMathBase<PixelT>&, ScalarT);
//template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::ArgValQuotientFunctor<ScalarT>, PixelT, void>::type>::type vw::operator/ < PixelT,ScalarT > (const vw::PixelMathBase<PixelT>&, vw::PixelMask<ChildPixel1T>);
//template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::ValArgQuotientFunctor<ScalarT>, PixelT, void>::type>::type vw::operator/ < PixelT,ScalarT > (vw::PixelMask<ChildPixel1T>, const vw::PixelMathBase<PixelT>&);
template boost::disable_if<vw::IsImageView<ScalarT>, const ImageT&>::type vw::operator/= < ImageT,ScalarT > (const vw::ImageViewBase<ImageT>&, ScalarT);
template boost::disable_if<vw::IsImageView<ScalarT>, ImageT&>::type vw::operator/= < ImageT,ScalarT > (vw::ImageViewBase<ImageT>&, ScalarT);
template boost::enable_if<vw::CompoundIsCompatible<T1, T2>, Pixel1T&>::type vw::operator/= < Pixel1T,Pixel2T > (vw::PixelMathBase<PixelT>&, const vw::PixelMathBase<Pixel2T>&);
template boost::enable_if<vw::IsScalar<ScalarT>, PixelT&>::type vw::operator/= < PixelT,ScalarT > (vw::PixelMathBase<PixelT>&, ScalarT);
//template boost::enable_if<vw::IsScalar<ScalarT>, PixelT&>::type vw::operator/= < PixelT,ScalarT > (vw::PixelMathBase<PixelT>&, vw::PixelMask<ChildPixel1T>);
template boost::enable_if<vw::CompoundIsCompatible<T1, T2>, bool>::type vw::operator== < Pixel1T,Pixel2T > (const vw::PixelMathBase<PixelT>&, const vw::PixelMathBase<Pixel2T>&);
template vw::UnaryPerPixelAccessorView<vw::EdgeExtensionView<ViewT, vw::ZeroEdgeExtension>, FuncT> vw::per_pixel_accessor_filter < ViewT,FuncT > (const vw::ImageViewBase<ImageT>&, const FuncT&);
template vw::UnaryPerPixelAccessorView<vw::EdgeExtensionView<ViewT, EdgeT>, FuncT> vw::per_pixel_accessor_filter < ViewT,FuncT,EdgeT > (const vw::ImageViewBase<ImageT>&, const FuncT&, EdgeT);
template vw::UnaryPerPixelView<SrcT, vw::UnaryCompoundFunctor<FuncT, SrcT::pixel_type> > vw::per_pixel_channel_filter < SrcT,FuncT > (const vw::ImageViewBase<ImageT>&, const FuncT&);
//template vw::BinaryPerPixelView<Image1T, Image2T, FuncT> vw::per_pixel_filter < Src1T,Src2T,FuncT > (const vw::ImageViewBase<ImageT>&, const vw::ImageViewBase<View2T>&, const FuncT&);
template vw::UnaryPerPixelView<ImageT, FuncT> vw::per_pixel_filter < SrcT,FuncT > (const vw::ImageViewBase<ImageT>&, const FuncT&);
//template boost::enable_if<vw::IsScalarOrCompound<PixelT>::type, DestT>::type vw::pixel_cast < DestT,SrcT > (SrcT);
//template vw::UnaryPerPixelView<ImageT, vw::PixelCastFunctor<PixelT> > vw::pixel_cast < PixelT,ImageT > (const vw::ImageViewBase<View2T>&);
//template boost::enable_if<vw::IsScalarOrCompound<PixelT>::type, DestT>::type vw::pixel_cast_rescale < DestT,SrcT > (SrcT);
//template vw::UnaryPerPixelView<ImageT, vw::PixelCastRescaleFunctor<PixelT> > vw::pixel_cast_rescale < PixelT,ImageT > (const vw::ImageViewBase<View2T>&);
template vw::PixelIndex3View vw::pixel_index3_view < ImageT > (const vw::ImageViewBase<ImageT>&);
//template vw::PixelIndexView vw::pixel_index_view < ImageT > (const vw::ImageViewBase<ImageT>&);
//template vw::PlanesToChannelsView<PixelT, ImageT> vw::planes_to_channels < PixelT,ImageT > (const vw::ImageViewBase<View2T>&);
template vw::BinaryPerPixelView<Image1T, Image2T, vw::math::ArgArgPowFunctor> vw::pow < Image1T,Image2T > (const vw::ImageViewBase<ImageT>&, const vw::ImageViewBase<View2T>&);
template boost::disable_if<vw::IsImageView<ScalarT>, vw::UnaryPerPixelView<ImageT, vw::math::ValArgPowFunctor<ScalarT> > >::type vw::pow < ImageT,ScalarT > (ScalarT, const vw::ImageViewBase<ImageT>&);
template boost::disable_if<vw::IsImageView<ScalarT>, vw::UnaryPerPixelView<ImageT, vw::math::ArgValPowFunctor<ScalarT> > >::type vw::pow < ImageT,ScalarT > (const vw::ImageViewBase<ImageT>&, ScalarT);
template boost::enable_if<vw::CompoundIsCompatible<T1, T2>, vw::CompoundResult<vw::math::ArgArgPowFunctor, Pixel1T, Pixel2T>::type>::type vw::pow < Pixel1T,Pixel2T > (const vw::PixelMathBase<PixelT>&, const vw::PixelMathBase<Pixel2T>&);
template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::math::ValArgPowFunctor<ScalarT>, PixelT, void>::type>::type vw::pow < PixelT,ScalarT > (ScalarT, const vw::PixelMathBase<PixelT>&);
template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::math::ArgValPowFunctor<ScalarT>, PixelT, void>::type>::type vw::pow < PixelT,ScalarT > (const vw::PixelMathBase<PixelT>&, ScalarT);
//template boost::enable_if<vw::IsResizable<DestT>, void>::type vw::rasterize < SrcT,DestT > (const SrcT&, DestT&);
//template boost::enable_if<vw::IsResizable<DestT>, void>::type vw::rasterize < SrcT,DestT > (const SrcT&, DestT&, vw::BBox2i);
//template void vw::rasterize < SrcT,DestT > (const SrcT&, const DestT&);
//template void vw::rasterize < SrcT,DestT > (const SrcT&, const DestT&, vw::BBox2i);
template void vw::read_image < ImageT > (const vw::ImageViewBase<ImageT>&, const vw::ImageResource&);
template void vw::read_image < ImageT > (const vw::ImageViewBase<ImageT>&, const vw::ImageResource&, const vw::BBox2i&);
template void vw::read_image < PixelT > (const vw::ImageView<PixelT>&, const vw::ImageResource&);
template void vw::read_image < PixelT > (const vw::ImageView<PixelT>&, const vw::ImageResource&, const vw::BBox2i&);
template void vw::read_image < PixelT > (vw::ImageView<PixelT>&, const vw::ImageResource&);
template void vw::read_image < PixelT > (vw::ImageView<PixelT>&, const vw::ImageResource&, const vw::BBox2i&);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgRealFunctor> vw::real < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgRealFunctor, PixelT, void>::type vw::real < PixelT > (const vw::PixelMathBase<PixelT>&);
template vw::TransformView<vw::InterpolationView<vw::EdgeExtensionView<ImageT, vw::ConstantEdgeExtension>, vw::BilinearInterpolation>, vw::ResampleTransform> vw::resample < ImageT > (const vw::ImageViewBase<ImageT>&, double);
template vw::TransformView<vw::InterpolationView<vw::EdgeExtensionView<ImageT, vw::ConstantEdgeExtension>, vw::BilinearInterpolation>, vw::ResampleTransform> vw::resample < ImageT > (const vw::ImageViewBase<ImageT>&, double, double);
//template boost::disable_if<vw::IsScalar<ScalarT>, vw::TransformView<vw::InterpolationView<vw::EdgeExtensionView<ImageT, ExtensionT>, vw::BilinearInterpolation>, vw::ResampleTransform> >::type vw::resample < ImageT,EdgeT > (const vw::ImageViewBase<ImageT>&, double, const EdgeT&);
template vw::TransformView<vw::InterpolationView<vw::EdgeExtensionView<ImageT, ExtensionT>, vw::BilinearInterpolation>, vw::ResampleTransform> vw::resample < ImageT,EdgeT > (const vw::ImageViewBase<ImageT>&, double, double, const EdgeT&);
template boost::disable_if<vw::IsScalar<InterpT>, vw::TransformView<vw::InterpolationView<vw::EdgeExtensionView<ImageT, ExtensionT>, InterpT>, vw::ResampleTransform> >::type vw::resample < ImageT,EdgeT,InterpT > (const vw::ImageViewBase<ImageT>&, double, const EdgeT&, const InterpT&);
template boost::disable_if<vw::IsScalar<InterpT>, vw::TransformView<vw::InterpolationView<vw::EdgeExtensionView<ImageT, ExtensionT>, InterpT>, vw::ResampleTransform> >::type vw::resample < ImageT,EdgeT,InterpT > (const vw::ImageViewBase<ImageT>&, double, double, const EdgeT&, const InterpT&);
template boost::disable_if<vw::IsScalar<InterpT>, vw::TransformView<vw::InterpolationView<vw::EdgeExtensionView<ImageT, ExtensionT>, InterpT>, vw::ResampleTransform> >::type vw::resample < ImageT,EdgeT,InterpT > (const vw::ImageViewBase<ImageT>&, double, vw::int32, vw::int32, const EdgeT&, const InterpT&);
template vw::TransformView<vw::InterpolationView<vw::EdgeExtensionView<ImageT, vw::ConstantEdgeExtension>, vw::BilinearInterpolation>, vw::ResampleTransform> vw::resize < ImageT > (const vw::ImageViewBase<ImageT>&, vw::int32, vw::int32);
template vw::TransformView<vw::InterpolationView<vw::EdgeExtensionView<ImageT, ExtensionT>, vw::BilinearInterpolation>, vw::ResampleTransform> vw::resize < ImageT,EdgeT > (const vw::ImageViewBase<ImageT>&, vw::int32, vw::int32, const EdgeT&);
template vw::TransformView<vw::InterpolationView<vw::EdgeExtensionView<ImageT, ExtensionT>, InterpT>, vw::ResampleTransform> vw::resize < ImageT,EdgeT,InterpT > (const vw::ImageViewBase<ImageT>&, vw::int32, vw::int32, const EdgeT&, const InterpT&);
template vw::TransformView<vw::InterpolationView<vw::EdgeExtensionView<ViewT, vw::ZeroEdgeExtension>, vw::BilinearInterpolation>, vw::RotateTransform> vw::rotate < ImageT > (const vw::ImageViewBase<ImageT>&, double);
template vw::TransformView<vw::InterpolationView<vw::EdgeExtensionView<ImageT, ExtensionT>, vw::BilinearInterpolation>, vw::RotateTransform> vw::rotate < ImageT,EdgeT > (const vw::ImageViewBase<ImageT>&, double, const EdgeT&);
template vw::TransformView<vw::InterpolationView<vw::EdgeExtensionView<ImageT, ExtensionT>, InterpT>, vw::RotateTransform> vw::rotate < ImageT,EdgeT,InterpT > (const vw::ImageViewBase<ImageT>&, double, const EdgeT&, const InterpT&);
template vw::Rotate180View<ImageT> vw::rotate_180 < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::Rotate90CCWView<ImageT> vw::rotate_90_ccw < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::Rotate90CWView<ImageT> vw::rotate_90_cw < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgRoundFunctor> vw::round < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgRoundFunctor, PixelT, void>::type vw::round < PixelT > (const vw::PixelMathBase<PixelT>&);
template vw::UnaryPerPixelView<ImageT, vw::SelectChannelFunctor<const ImageT> > vw::select_alpha_channel < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::UnaryPerPixelView<ImageT, vw::SelectChannelFunctor<ImageT> > vw::select_alpha_channel < ImageT > (vw::ImageViewBase<ImageT>&);
template vw::UnaryPerPixelView<ImageT, vw::SelectChannelFunctor<const ImageT> > vw::select_channel < ImageT > (const vw::ImageViewBase<ImageT>&, vw::int32);
template vw::UnaryPerPixelView<ImageT, vw::SelectChannelFunctor<ImageT> > vw::select_channel < ImageT > (vw::ImageViewBase<ImageT>&, vw::int32);
template vw::SelectColView<ImageT> vw::select_col < ImageT > (const vw::ImageViewBase<ImageT>&, vw::int32);
template vw::SelectPlaneView<ImageT> vw::select_plane < ImageT > (const vw::ImageViewBase<ImageT>&, vw::int32);
template vw::SelectRowView<ImageT> vw::select_row < ImageT > (const vw::ImageViewBase<ImageT>&, vw::int32);
//template vw::SeparableConvolutionView<SrcT, KRangeT::value_type, vw::ConstantEdgeExtension> vw::separable_convolution_filter < SrcT,KRangeT > (const vw::ImageViewBase<ImageT>&, const KRangeT&, const KRangeT&);
//template vw::SeparableConvolutionView<SrcT, KRangeT::value_type, vw::ConstantEdgeExtension> vw::separable_convolution_filter < SrcT,KRangeT > (const vw::ImageViewBase<ImageT>&, const KRangeT&, const KRangeT&, vw::int32, vw::int32);
//template vw::SeparableConvolutionView<SrcT, KRangeT::value_type, EdgeT> vw::separable_convolution_filter < SrcT,KRangeT,EdgeT > (const vw::ImageViewBase<ImageT>&, const KRangeT&, const KRangeT&, EdgeT);
//template vw::SeparableConvolutionView<SrcT, KRangeT::value_type, EdgeT> vw::separable_convolution_filter < SrcT,KRangeT,EdgeT > (const vw::ImageViewBase<ImageT>&, const KRangeT&, const KRangeT&, vw::int32, vw::int32, EdgeT);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgSinFunctor> vw::sin < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgSinFunctor, PixelT, void>::type vw::sin < PixelT > (const vw::PixelMathBase<PixelT>&);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgSinhFunctor> vw::sinh < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgSinhFunctor, PixelT, void>::type vw::sinh < PixelT > (const vw::PixelMathBase<PixelT>&);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgSqrtFunctor> vw::sqrt < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgSqrtFunctor, PixelT, void>::type vw::sqrt < PixelT > (const vw::PixelMathBase<PixelT>&);
template double vw::stddev_channel_value < ViewT > (const vw::ImageViewBase<ImageT>&);
template vw::PixelChannelCast<vw::UnmaskedPixelType<ViewT::pixel_type>::type, double>::type vw::stddev_pixel_value < ViewT > (const vw::ImageViewBase<ImageT>&);
template vw::SubsampleView<ImageT> vw::subsample < ImageT > (const ImageT&, vw::int32);
template vw::SubsampleView<ImageT> vw::subsample < ImageT > (const ImageT&, vw::int32, vw::int32);
template vw::AccumulatorType<vw::PixelChannelType<ViewT::pixel_type>::type>::type vw::sum_of_channel_values < ViewT > (const vw::ImageViewBase<ImageT>&);
template vw::PixelChannelCast<vw::UnmaskedPixelType<ViewT::pixel_type>::type, vw::AccumulatorType<vw::PixelChannelType<ViewT::pixel_type>::type>::type>::type vw::sum_of_pixel_values < ViewT > (const vw::ImageViewBase<ImageT>&);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgTanFunctor> vw::tan < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgTanFunctor, PixelT, void>::type vw::tan < PixelT > (const vw::PixelMathBase<PixelT>&);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgTanhFunctor> vw::tanh < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgTanhFunctor, PixelT, void>::type vw::tanh < PixelT > (const vw::PixelMathBase<PixelT>&);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgTgammaFunctor> vw::tgamma < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgTgammaFunctor, PixelT, void>::type vw::tgamma < PixelT > (const vw::PixelMathBase<PixelT>&);
template vw::UnaryPerPixelView<ImageT, vw::UnaryCompoundFunctor<vw::ChannelThresholdFunctor<ImageT::pixel_type>, ImageT::pixel_type> > vw::threshold < ImageT > (const vw::ImageViewBase<ImageT>&);
//template vw::UnaryPerPixelView<ImageT, vw::UnaryCompoundFunctor<vw::ChannelThresholdFunctor<ImageT::pixel_type>, ImageT::pixel_type> > vw::threshold < ImageT,ThreshT > (const vw::ImageViewBase<ImageT>&, ThreshT);
//template vw::UnaryPerPixelView<ImageT, vw::UnaryCompoundFunctor<vw::ChannelThresholdFunctor<ImageT::pixel_type>, ImageT::pixel_type> > vw::threshold < ImageT,ThreshT,HighT > (const vw::ImageViewBase<ImageT>&, ThreshT, HighT);
//template vw::UnaryPerPixelView<ImageT, vw::UnaryCompoundFunctor<vw::ChannelThresholdFunctor<ImageT::pixel_type>, ImageT::pixel_type> > vw::threshold < ImageT,ThreshT,LowT,HighT > (const vw::ImageViewBase<ImageT>&, ThreshT, LowT, HighT);
template vw::TransformView<vw::InterpolationView<vw::EdgeExtensionView<ViewT, vw::ZeroEdgeExtension>, vw::BilinearInterpolation>, TransformT> vw::transform < ImageT,TransformT > (const vw::ImageViewBase<ImageT>&, const TransformT&);
template vw::TransformView<vw::InterpolationView<vw::EdgeExtensionView<ViewT, vw::ZeroEdgeExtension>, vw::BilinearInterpolation>, TransformT> vw::transform < ImageT,TransformT > (const vw::ImageViewBase<ImageT>&, const TransformT&, vw::int32, vw::int32);
//template vw::CropView<vw::TransformView<vw::InterpolationView<vw::EdgeExtensionView<ViewT, vw::ZeroEdgeExtension>, vw::BilinearInterpolation>, TransformT> > vw::transform < ImageT,TransformT,BBoxRealT > (const vw::ImageViewBase<ImageT>&, const TransformT&, const vw::math::BBox<BBoxRealT, 2>&);
//template vw::CropView<vw::TransformView<vw::InterpolationView<vw::EdgeExtensionView<ImageT, EdgeT>, vw::BilinearInterpolation>, TransformT> > vw::transform < ImageT,TransformT,BBoxRealT,EdgeT > (const vw::ImageViewBase<ImageT>&, const TransformT&, const vw::math::BBox<BBoxRealT, 2>&, const EdgeT&);
//template vw::CropView<vw::TransformView<vw::InterpolationView<vw::EdgeExtensionView<ImageT, EdgeT>, InterpT>, TransformT> > vw::transform < ImageT,TransformT,BBoxRealT,EdgeT,InterpT > (const vw::ImageViewBase<ImageT>&, const TransformT&, const vw::math::BBox<BBoxRealT, 2>&, const EdgeT&, const InterpT&);
template vw::TransformView<vw::InterpolationView<vw::EdgeExtensionView<ViewT, EdgeT>, vw::BilinearInterpolation>, TransformT> vw::transform < ImageT,TransformT,EdgeT > (const vw::ImageViewBase<ImageT>&, const TransformT&, const EdgeT&);
template vw::TransformView<vw::InterpolationView<vw::EdgeExtensionView<ViewT, EdgeT>, vw::BilinearInterpolation>, TransformT> vw::transform < ImageT,TransformT,EdgeT > (const vw::ImageViewBase<ImageT>&, const TransformT&, vw::int32, vw::int32, const EdgeT&);
template boost::disable_if<vw::IsScalar<InterpT>, vw::TransformView<vw::InterpolationView<vw::EdgeExtensionView<ViewT, EdgeT>, InterpT>, TransformT> >::type vw::transform < ImageT,TransformT,EdgeT,InterpT > (const vw::ImageViewBase<ImageT>&, const TransformT&, const EdgeT&, const InterpT&);
template vw::TransformView<vw::InterpolationView<vw::EdgeExtensionView<ViewT, EdgeT>, InterpT>, TransformT> vw::transform < ImageT,TransformT,EdgeT,InterpT > (const vw::ImageViewBase<ImageT>&, const TransformT&, vw::int32, vw::int32, const EdgeT&, const InterpT&);
template vw::TransformView<vw::InterpolationView<vw::EdgeExtensionView<ViewT, vw::ZeroEdgeExtension>, vw::BilinearInterpolation>, vw::TranslateTransform> vw::translate < ImageT > (const vw::ImageViewBase<ImageT>&, double, double);
template vw::EdgeExtensionView<ViewT, vw::ZeroEdgeExtension> vw::translate < ImageT > (const vw::ImageViewBase<ImageT>&, vw::int32, vw::int32);
template vw::TransformView<vw::InterpolationView<vw::EdgeExtensionView<ImageT, ExtensionT>, vw::BilinearInterpolation>, vw::TranslateTransform> vw::translate < ImageT,EdgeT > (const vw::ImageViewBase<ImageT>&, double, double, const EdgeT&);
template vw::EdgeExtensionView<ImageT, ExtensionT> vw::translate < ImageT,EdgeT > (const vw::ImageViewBase<ImageT>&, vw::int32, vw::int32, const EdgeT&);
template vw::TransformView<vw::InterpolationView<vw::EdgeExtensionView<ImageT, ExtensionT>, InterpT>, vw::TranslateTransform> vw::translate < ImageT,EdgeT,InterpT > (const vw::ImageViewBase<ImageT>&, double, double, const EdgeT&, const InterpT&);
template vw::TransposeView<ImageT> vw::transpose < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::UnaryPerPixelView<ImageT, vw::math::ArgTruncFunctor> vw::trunc < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::CompoundResult<vw::math::ArgTruncFunctor, PixelT, void>::type vw::trunc < PixelT > (const vw::PixelMathBase<PixelT>&);
//template void vw::validate < ChildPixelT > (vw::PixelMask<ChildT>&);
template void vw::validate < PixelT > (PixelT&);
template double vw::weighted_mean_channel_value < ViewT > (const vw::ImageViewBase<ImageT>&);
template vw::PixelWithoutAlpha<vw::PixelChannelCast<vw::UnmaskedPixelType<ViewT::pixel_type>::type, double>::type>::type vw::weighted_mean_pixel_value < ViewT > (const vw::ImageViewBase<ImageT>&);
//template vw::PixelGray<ChT> vw::weighted_rgb_to_gray < ChannelT > (const vw::PixelRGB<ChT>&);
//template vw::PixelGray<ChT> vw::weighted_rgb_to_gray < ChannelT > (const vw::PixelRGB<ChT>&, double, double, double);
//template vw::PixelGrayA<ChT> vw::weighted_rgb_to_gray < ChannelT > (const vw::PixelRGBA<ChT>&);
//template vw::PixelGrayA<ChT> vw::weighted_rgb_to_gray < ChannelT > (const vw::PixelRGBA<ChT>&, double, double, double);
template vw::UnaryPerPixelView<ImageT, vw::WeightedRGBToGrayFunctor> vw::weighted_rgb_to_gray < ImageT > (const vw::ImageViewBase<ImageT>&);
template vw::UnaryPerPixelView<ImageT, vw::WeightedRGBToGrayFunctor> vw::weighted_rgb_to_gray < ImageT > (const vw::ImageViewBase<ImageT>&, double, double, double);
//template void vw::write_image < ImageT > (vw::ImageResource&, const vw::ImageViewBase<ImageT>&, const vw::BBox2i&);
template void vw::write_image < ImageT > (vw::ImageResource&, const vw::ImageViewBase<ImageT>&, const vw::ProgressCallback&);
template void vw::write_image < PixelT > (vw::ImageResource&, const vw::ImageView<PixelT>&);
template void vw::write_image < PixelT > (vw::ImageResource&, const vw::ImageView<PixelT>&, const vw::BBox2i&);
