template struct vw::ChannelRangeHelper<T, <anonymous> >;
template class  vw::ImageViewRefAccessor<PixelT>;
template class  vw::MaskToAlpha<PixelT>;
template class  vw::PixelIterator<ViewT>;
template struct vw::PixelMask<ChildT>;
template class  vw::PlanesToChannelsView<PixelT, ImageT>;
template class  vw::SeparableConvolutionView<ImageT, KernelT, EdgeT>;
template struct vw::RasterizeFunctor<DestT>;
template class  vw::BlockRasterizeView<vw::ImageResourceView<vw::PixelRGB<unsigned char> > >::RasterizeFunctor<DestT>;
template T vw::_round_if_needed < T > (boost::enable_if<boost::is_floating_point<DestT>, double>::type);
template vw::UnaryPerPixelView<ImageT, vw::PixelChannelCastFunctor<ChannelT> > vw::channel_cast < ChannelT,ImageT > (const vw::ImageViewBase<View2T>&);
template vw::UnaryPerPixelView<ImageT, vw::PixelChannelCastRescaleFunctor<ChannelT> > vw::channel_cast_rescale < ChannelT,ImageT > (const vw::ImageViewBase<View2T>&);
template vw::ProductType<SrcAccessT::pixel_type, std::iterator_traits<_ForwardIterator2>::value_type>::type vw::correlate_1d_at_point < SrcAccessT,KernelIterT > (const SrcAccessT&, const KernelIterT&, vw::int32);
template vw::CropView<ImageT> vw::crop < ImageT,BBoxRealT > (const vw::ImageViewBase<ImageT>&, const vw::math::BBox<BBoxRealT, 2>&);
template vw::EdgeMaskView<ViewT> vw::edge_mask < ViewT > (const vw::ImageViewBase<ImageT>&, const vw::ProgressCallback&);
template void vw::generate_derivative_kernel < KernelT > (std::vector<CharT, std::allocator<_CharT> >&, vw::int32, vw::int32);
template void vw::generate_gaussian_derivative_kernel < KernelT > (vw::ImageView<PixelT>&, double, vw::int32, double, vw::int32, double, vw::int32);
template void vw::generate_gaussian_kernel < KernelT > (std::vector<CharT, std::allocator<_CharT> >&, double, vw::int32);
template void vw::generate_laplacian_of_gaussian_kernel < KernelT > (vw::ImageView<PixelT>&, double, vw::int32);
template vw::ImageView<int> vw::grassfire < SourceT > (const vw::ImageViewBase<ImageT>&);
template void vw::grassfire < SourceT,OutputT > (const vw::ImageViewBase<ImageT>&, vw::ImageView<OutputT>&);
template void vw::invalidate < ChildPixelT > (vw::PixelMask<ChildT>&);
template bool vw::is_transparent < ChildT > (const vw::PixelMask<ChildT>&);
template boost::enable_if<vw::PixelHasAlpha<T>::type, bool>::type vw::is_transparent < PixelT > (const PixelT&);
template bool vw::is_valid < ChildT > (const vw::PixelMask<ChildT>&);
template vw::UnaryPerPixelView<ViewT, vw::MaskToAlpha<ViewT::pixel_type> > vw::mask_to_alpha < ViewT > (const vw::ImageViewBase<ImageT>&);
template vw::UnmaskedPixelType<ViewT::pixel_type>::type vw::max_pixel_value < ViewT > (const vw::ImageViewBase<ImageT>&);
template boost::enable_if<vw::IsScalarOrCompound<T>, double>::type vw::mean_channel_value < T > (const vw::PixelMask<ChildT>&);
template ViewT::pixel_type vw::median_pixel_value < ViewT > (const vw::ImageViewBase<ImageT>&);
template void vw::min_max_pixel_values < ViewT > (const vw::ImageViewBase<ImageT>&, vw::UnmaskedPixelType<ViewT::pixel_type>::type&, vw::UnmaskedPixelType<ViewT::pixel_type>::type&);
template vw::UnmaskedPixelType<ViewT::pixel_type>::type vw::min_pixel_value < ViewT > (const vw::ImageViewBase<ImageT>&);
template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::ArgValProductFunctor<ScalarT>, PixelT, void>::type>::type vw::operator* < PixelT,ScalarT > (const vw::PixelMathBase<PixelT>&, vw::PixelMask<ChildPixel1T>);
template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::ValArgProductFunctor<ScalarT>, PixelT, void>::type>::type vw::operator* < PixelT,ScalarT > (vw::PixelMask<ChildPixel1T>, const vw::PixelMathBase<PixelT>&);
template boost::enable_if<vw::IsScalar<ScalarT>, PixelT&>::type vw::operator*= < PixelT,ScalarT > (vw::PixelMathBase<PixelT>&, vw::PixelMask<ChildPixel1T>);
template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::ArgValSumFunctor<ScalarT>, PixelT, void>::type>::type vw::operator+ < PixelT,ScalarT > (const vw::PixelMathBase<PixelT>&, vw::PixelMask<ChildPixel1T>);
template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::ValArgSumFunctor<ScalarT>, PixelT, void>::type>::type vw::operator+ < PixelT,ScalarT > (vw::PixelMask<ChildPixel1T>, const vw::PixelMathBase<PixelT>&);
template boost::enable_if<vw::IsScalar<ScalarT>, PixelT&>::type vw::operator+= < PixelT,ScalarT > (vw::PixelMathBase<PixelT>&, vw::PixelMask<ChildPixel1T>);
template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::ArgValDifferenceFunctor<ScalarT>, PixelT, void>::type>::type vw::operator- < PixelT,ScalarT > (const vw::PixelMathBase<PixelT>&, vw::PixelMask<ChildPixel1T>);
template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::ValArgDifferenceFunctor<ScalarT>, PixelT, void>::type>::type vw::operator- < PixelT,ScalarT > (vw::PixelMask<ChildPixel1T>, const vw::PixelMathBase<PixelT>&);
template boost::enable_if<vw::IsScalar<ScalarT>, PixelT&>::type vw::operator-= < PixelT,ScalarT > (vw::PixelMathBase<PixelT>&, vw::PixelMask<ChildPixel1T>);
template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::ArgValQuotientFunctor<ScalarT>, PixelT, void>::type>::type vw::operator/ < PixelT,ScalarT > (const vw::PixelMathBase<PixelT>&, vw::PixelMask<ChildPixel1T>);
template boost::enable_if<vw::IsScalar<ScalarT>, vw::CompoundResult<vw::ValArgQuotientFunctor<ScalarT>, PixelT, void>::type>::type vw::operator/ < PixelT,ScalarT > (vw::PixelMask<ChildPixel1T>, const vw::PixelMathBase<PixelT>&);
template boost::enable_if<vw::IsScalar<ScalarT>, PixelT&>::type vw::operator/= < PixelT,ScalarT > (vw::PixelMathBase<PixelT>&, vw::PixelMask<ChildPixel1T>);
template vw::BinaryPerPixelView<Image1T, Image2T, FuncT> vw::per_pixel_filter < Src1T,Src2T,FuncT > (const vw::ImageViewBase<ImageT>&, const vw::ImageViewBase<View2T>&, const FuncT&);
template boost::enable_if<vw::IsScalarOrCompound<PixelT>::type, DestT>::type vw::pixel_cast < DestT,SrcT > (SrcT);
template vw::PixelIndexView vw::pixel_index_view < ImageT > (const vw::ImageViewBase<ImageT>&);
template boost::enable_if<vw::IsResizable<DestT>, void>::type vw::rasterize < SrcT,DestT > (const SrcT&, DestT&);
template boost::disable_if<vw::IsScalar<ScalarT>, vw::TransformView<vw::InterpolationView<vw::EdgeExtensionView<ImageT, ExtensionT>, vw::BilinearInterpolation>, vw::ResampleTransform> >::type vw::resample < ImageT,EdgeT > (const vw::ImageViewBase<ImageT>&, double, const EdgeT&);
template vw::SeparableConvolutionView<SrcT, KRangeT::value_type, vw::ConstantEdgeExtension> vw::separable_convolution_filter < SrcT,KRangeT > (const vw::ImageViewBase<ImageT>&, const KRangeT&, const KRangeT&);
template vw::UnaryPerPixelView<ImageT, vw::UnaryCompoundFunctor<vw::ChannelThresholdFunctor<ImageT::pixel_type>, ImageT::pixel_type> > vw::threshold < ImageT,ThreshT > (const vw::ImageViewBase<ImageT>&, ThreshT);
template vw::CropView<vw::TransformView<vw::InterpolationView<vw::EdgeExtensionView<ViewT, vw::ZeroEdgeExtension>, vw::BilinearInterpolation>, TransformT> > vw::transform < ImageT,TransformT,BBoxRealT > (const vw::ImageViewBase<ImageT>&, const TransformT&, const vw::math::BBox<BBoxRealT, 2>&);
template void vw::validate < ChildPixelT > (vw::PixelMask<ChildT>&);
template vw::PixelGray<ChT> vw::weighted_rgb_to_gray < ChannelT > (const vw::PixelRGB<ChT>&);
template void vw::write_image < ImageT > (vw::ImageResource&, const vw::ImageViewBase<ImageT>&, const vw::BBox2i&);
template vw::PixelGray<ChT> vw::weighted_rgb_to_gray < ChannelT > (const vw::PixelRGB<ChT>&, double, double, double);
template vw::PixelGrayA<ChT> vw::weighted_rgb_to_gray < ChannelT > (const vw::PixelRGBA<ChT>&);
template vw::PixelGrayA<ChT> vw::weighted_rgb_to_gray < ChannelT > (const vw::PixelRGBA<ChT>&, double, double, double);
template vw::CropView<vw::TransformView<vw::InterpolationView<vw::EdgeExtensionView<ImageT, EdgeT>, vw::BilinearInterpolation>, TransformT> > vw::transform < ImageT,TransformT,BBoxRealT,EdgeT > (const vw::ImageViewBase<ImageT>&, const TransformT&, const vw::math::BBox<BBoxRealT, 2>&, const EdgeT&);
template vw::CropView<vw::TransformView<vw::InterpolationView<vw::EdgeExtensionView<ImageT, EdgeT>, InterpT>, TransformT> > vw::transform < ImageT,TransformT,BBoxRealT,EdgeT,InterpT > (const vw::ImageViewBase<ImageT>&, const TransformT&, const vw::math::BBox<BBoxRealT, 2>&, const EdgeT&, const InterpT&);
template vw::UnaryPerPixelView<ImageT, vw::UnaryCompoundFunctor<vw::ChannelThresholdFunctor<ImageT::pixel_type>, ImageT::pixel_type> > vw::threshold < ImageT,ThreshT,HighT > (const vw::ImageViewBase<ImageT>&, ThreshT, HighT);
template vw::UnaryPerPixelView<ImageT, vw::UnaryCompoundFunctor<vw::ChannelThresholdFunctor<ImageT::pixel_type>, ImageT::pixel_type> > vw::threshold < ImageT,ThreshT,LowT,HighT > (const vw::ImageViewBase<ImageT>&, ThreshT, LowT, HighT);
template vw::SeparableConvolutionView<SrcT, KRangeT::value_type, vw::ConstantEdgeExtension> vw::separable_convolution_filter < SrcT,KRangeT > (const vw::ImageViewBase<ImageT>&, const KRangeT&, const KRangeT&, vw::int32, vw::int32);
template vw::SeparableConvolutionView<SrcT, KRangeT::value_type, EdgeT> vw::separable_convolution_filter < SrcT,KRangeT,EdgeT > (const vw::ImageViewBase<ImageT>&, const KRangeT&, const KRangeT&, EdgeT);
template vw::SeparableConvolutionView<SrcT, KRangeT::value_type, EdgeT> vw::separable_convolution_filter < SrcT,KRangeT,EdgeT > (const vw::ImageViewBase<ImageT>&, const KRangeT&, const KRangeT&, vw::int32, vw::int32, EdgeT);
template boost::enable_if<vw::IsResizable<DestT>, void>::type vw::rasterize < SrcT,DestT > (const SrcT&, DestT&, vw::BBox2i);
template void vw::rasterize < SrcT,DestT > (const SrcT&, const DestT&);
template void vw::rasterize < SrcT,DestT > (const SrcT&, const DestT&, vw::BBox2i);
template vw::PlanesToChannelsView<PixelT, ImageT> vw::planes_to_channels < PixelT,ImageT > (const vw::ImageViewBase<View2T>&);
template vw::UnaryPerPixelView<ImageT, vw::PixelCastFunctor<PixelT> > vw::pixel_cast < PixelT,ImageT > (const vw::ImageViewBase<View2T>&);
template boost::enable_if<vw::IsScalarOrCompound<PixelT>::type, DestT>::type vw::pixel_cast_rescale < DestT,SrcT > (SrcT);
template vw::UnaryPerPixelView<ImageT, vw::PixelCastRescaleFunctor<PixelT> > vw::pixel_cast_rescale < PixelT,ImageT > (const vw::ImageViewBase<View2T>&);
template std::vector<vw::math::BBox<int, 2>, std::allocator<vw::math::BBox<int, 2> > > vw::image_blocks < T > (const T&, vw::int32, vw::int32);
